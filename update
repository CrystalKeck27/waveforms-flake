#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python3.withPackages(ps: [ ps.beautifulsoup4 ps.requests ])"
from __future__ import annotations

import json
import re
import subprocess
from dataclasses import dataclass

import requests
from bs4 import BeautifulSoup


@dataclass(frozen=True)
class Item:
    name: str
    url: str
    pattern: re.Pattern
    download_url: Callable[[str, str], str]


PACKAGES_FILE = "./data/packages.json"

DEBIAN_ARCHS = {
    "x86_64-linux": "amd64",
    "i686-linux": "i386",
    "aarch64-linux": "arm64",
    "armv7l-linux": "armhf",
}

SYSTEMS = DEBIAN_ARCHS.keys()


def adept2_deb_download_url(system: str, version: str):
    return f"https://files.digilent.com/Software/Adept2+Runtime/{version}/digilent.adept.runtime_{version}-{DEBIAN_ARCHS[system]}.deb"


def waveforms_deb_download_url(system: str, version: str):
    return f"https://files.digilent.com/Software/Waveforms2015/{version}/digilent.waveforms_{version}_{DEBIAN_ARCHS[system]}.deb"


CONTROL = [
    Item(
        name="adept2-runtime",
        url="https://reference.digilentinc.com/reference/software/adept/start",
        pattern=re.compile(r"\s*All OS v([0-9.]+) Download\s*"),
        download_url=adept2_deb_download_url,
    ),
    Item(
        name="waveforms",
        url="https://reference.digilentinc.com/reference/software/waveforms/waveforms-3/start",
        pattern=re.compile(r"\s*Latest Downloads \(([0-9.]+)\) .*"),
        download_url=waveforms_deb_download_url,
    ),
]


def scrape_latest_version(url, pattern):
    response = requests.get(url)
    response.raise_for_status()
    html = BeautifulSoup(response.text, "html.parser")
    if (version_text := html.find(string=pattern)) and (m := pattern.match(version_text)):
        return m.group(1)
    else:
        raise RuntimeError(f"Could not find version text from {url}")


if __name__ == "__main__":
    with open(PACKAGES_FILE, "rb") as inp:
        current_data = json.load(inp)

    for item in CONTROL:
        latest_version = scrape_latest_version(item.url, item.pattern)

        if current_data[item.name]["version"] == latest_version:
            print(f"{item.name} up to date at {latest_version}.")
        else:
            print(f"Update {item.name} from {current_data[item.name]['version']} to {latest_version}")
            for system in SYSTEMS:
                url = item.download_url(system, latest_version)
                proc = subprocess.run(["nix", "--quiet", "store", "prefetch-file", "--json", url], capture_output=True)
                proc.check_returncode()
                result = json.loads(proc.stdout)
                current_data[item.name]["systems"][system]["url"] = url
                current_data[item.name]["systems"][system]["hash"] = result["hash"]

    with open(PACKAGES_FILE, "w") as out:
        json.dump(current_data, out, indent=4)


# Local Variables:
# mode: python
# End:
